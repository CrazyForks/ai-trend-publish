name: Deploy to Production # 部署到生产环境

on: # 触发条件
  push:
    branches: [main] # 当推送到 main 分支时触发
  workflow_dispatch: # 允许手动触发工作流

jobs:
  deploy:
    runs-on: ubuntu-latest # 在最新版本的 Ubuntu 运行器上运行

    steps:
      - uses: actions/checkout@v4 # 检出代码

      - name: Setup Node.js # 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: "20" # 使用 Node.js 20 版本
          cache: "npm" # 启用 npm 依赖缓存

      - name: Install dependencies # 安装项目依赖
        run: npm ci

      - name: Build # 构建项目
        run: npm run build

      - name: Install sshpass # 安装 sshpass 用于自动化 SSH 操作
        run: sudo apt-get install -y sshpass

      - name: Add known hosts # 添加服务器到已知主机列表，避免 SSH 警告
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file # 创建环境配置文件
        run: |
          cat > .env << EOL
          # 数据库配置
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          EOL

      - name: Deploy to server # 部署到服务器
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }} # 设置 SSH 密码
        run: |
          # 打包构建文件
          tar -czf build.tar.gz dist package*.json .env

          # 使用 sshpass 将文件复制到服务器
          sshpass -e scp build.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/

          # 通过 SSH 在服务器上执行命令
          sshpass -e ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            cd ~/app
            tar -xzf build.tar.gz  # 解压文件
            npm ci --production    # 安装生产环境依赖
            pm2 delete trend-finder || true  # 停止旧的进程（如果存在）
            pm2 start dist/index.js --name trend-finder  # 启动新的进程
            rm build.tar.gz  # 清理临时文件
          '
