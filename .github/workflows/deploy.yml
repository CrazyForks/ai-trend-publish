name: Deploy to Production # 部署到生产环境

on:
  push:
    tags:
      - "v*" # 当创建以v开头的tag时触发
  workflow_dispatch: # 允许手动触发工作流

jobs:
  deploy:
    runs-on: ubuntu-latest # 在最新版本的 Ubuntu 运行器上运行

    steps:
      - uses: actions/checkout@v4 # 检出代码

      - name: Setup Deno # 设置 Deno 环境
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.x" # 使用最新的 Deno 2.x 版本

      - name: Cache dependencies # 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno2-${{ hashFiles('**/deps.ts') }}

      - name: Install dependencies # 安装项目依赖
        run: deno cache --unstable src/index.ts

      - name: Build # 构建项目
        run: |
          deno compile --allow-env --allow-ffi --allow-read --allow-sys --allow-net \
          --target x86_64-unknown-linux-gnu \
          --output dist/trend-finder \
          --include src/modules/render/templates \
          src/index.ts

      - name: Create .env file # 创建环境配置文件
        run: |
          cat > .env << EOL
          # 数据库配置
          ENABLE_DB=true
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          EOL

      - name: Setup SSH # 设置 SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Check and Install Deno on Server # 检查并安装 Deno
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" '
            if ! command -v deno &> /dev/null; then
              echo "Installing Deno..."
              curl -fsSL https://deno.land/x/install/install.sh | sh
              echo "export DENO_INSTALL=\"\$HOME/.deno\"" >> ~/.bashrc
              echo "export PATH=\"\$DENO_INSTALL/bin:\$PATH\"" >> ~/.bashrc
              source ~/.bashrc
            else
              echo "Deno is already installed"
              deno --version
            fi
          '

      - name: Test SSH Connection # 测试 SSH 连接
        run: |
          echo "Testing SSH connection..."
          echo "Server: ${{ secrets.SERVER_HOST }}"
          echo "User: ${{ secrets.SERVER_USER }}"
          ssh -i ~/.ssh/id_rsa "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "source ~/.bashrc && deno --version && echo 'SSH connection successful'"

      - name: Package Files # 打包文件
        run: |
          cp -r src/modules/render/templates dist/
          tar -czf build.tar.gz dist deno.json deno.lock .env

      - name: Upload to Server # 上传到服务器
        run: |
          scp -i ~/.ssh/id_rsa build.tar.gz "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/"

      - name: Deploy on Server # 在服务器上部署
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "cd ~/app && \
            source ~/.bashrc && \
            tar -xzf build.tar.gz && \
            pkill -f 'trend-finder' || true && \
            nohup ./dist/trend-finder --allow-env --allow-ffi --allow-read --allow-sys --allow-net > trend-finder.log 2>&1 & \
            rm build.tar.gz"
